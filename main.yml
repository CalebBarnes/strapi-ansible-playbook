---
- hosts: webservers
  vars_files:
    - ./vars/main.yml
  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
      become: true

    - name: Setup passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL) NOPASSWD: ALL"
        validate: "/usr/sbin/visudo -cf %s"
      become: true

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ created_username }}"
        state: present
        groups: sudo
        shell: /bin/bash
        append: true
        create_home: true
      become: true

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ created_username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
      become: true

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin prohibit-password"
      become: true

    - name: Update apt and install required system packages
      apt:
        pkg:
          - curl
          - vim
          - git
          - ufw
          - build-essential # required for some npm packages to work
          - nginx # the web server we will use to serve our nodejs app
          - certbot # Letâ€™s Encrypt SSL certificates
          - python3-certbot-nginx
          - postgresql
          - postgresql-contrib
          - python3-pip
        state: latest
        update_cache: true
      become: true

    - name: Install psycopg2 dependancy with pip3 (Required for postgres commands)
      pip:
        name: psycopg2-binary
      become_user: "{{ created_username }}"
      become: true

    - name: Install nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      args:
        creates: "~/.nvm/nvm.sh"
      become_user: "{{ created_username }}"
      become: true

    - name: Install node with nvm
      shell: ". ~/.nvm/nvm.sh && nvm install {{ node_version }} && nvm alias default {{ node_version }} && nvm use default"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "/home/{{ created_username }}/.nvm/versions/node/*/bin/npm"
      become_user: "{{ created_username }}"
      become: true

    - name: Install yarn
      shell: ". ~/.nvm/nvm.sh && npm install yarn -g"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "~/.nvm/versions/node/*/bin/yarn"
      become_user: "{{ created_username }}"
      become: true

    - name: Get current node version
      shell: ". ~/.nvm/nvm.sh && node -v"
      register: detected_node_version
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
      become_user: "{{ created_username }}"
      become: true

    - name: create symlink node in nvm folder to /usr/local/bin
      file:
        src: "/home/{{ created_username }}/.nvm/versions/node/{{ detected_node_version['stdout'] }}/bin/node"
        dest: "/usr/local/bin/node"
        state: link

    - name: create symlink npm in nvm folder to /usr/local/bin
      file:
        src: "/home/{{ created_username }}/.nvm/versions/node/{{ detected_node_version['stdout'] }}/bin/npm"
        dest: "/usr/local/bin/npm"
        state: link

    - name: Install pm2
      npm:
        name: pm2
        global: yes
        state: present
      become_user: "{{ created_username }}"
      become: true

    - name: create symlink pm2 in nvm folder to /usr/local/bin
      file:
        src: "/home/{{ created_username }}/.yarn/bin/pm2"
        dest: "/usr/local/bin/pm2"
        state: link

    - name: Add yarn global bin to PATH in profile
      blockinfile:
        path: "~/.profile"
        block: |
          # set PATH so it includes yarn global bin if it exists
          if [ -d "$HOME/.yarn/bin" ] ; then
              PATH="$HOME/.yarn/bin:$PATH"
          fi
      become_user: "{{ created_username }}"
      become: true

    # Generating SSH key and adding it to GitHub
    - name: Check if SSH key is already present
      stat:
        path: "{{ KEY_PATH }}"
      register: key_stat_result
      become_user: "{{ created_username }}"
      become: true

    - name: Generate SSH key for accessing GitHub
      command: "ssh-keygen -t rsa -f {{ KEY_PATH }} -N ''"
      when: not key_stat_result.stat.exists
      become_user: "{{ created_username }}"
      become: true

    - name: Get key content
      command: "cat {{ KEY_PATH }}.pub"
      register: key_content
      become_user: "{{ created_username }}"
      become: true

    - name: Check if known_host exists
      stat:
        path: "{{ KNOWN_HOSTS_PATH }}"
      register: known_hosts_stat
      become_user: "{{ created_username }}"
      become: true

    - name: Create known_hosts if it doesn't exist
      file:
        path: "{{ KNOWN_HOSTS_PATH }}"
        state: touch
      when: not known_hosts_stat.stat.exists
      become_user: "{{ created_username }}"
      become: true

    - name: Get the content of known hosts
      shell: "cat {{ KNOWN_HOSTS_PATH }} | grep github.com"
      register: host_stat
      failed_when: host_stat.rc > 1
      become_user: "{{ created_username }}"
      become: true

    - name: Modify known hosts
      block:
        - name: Fetch GitHub public key
          command: ssh-keyscan -T 10 github.com
          register: keyscan
          become_user: "{{ created_username }}"
          become: true

        - name: Add GitHub public key to ssh known_hosts
          lineinfile:
            path: "{{ KNOWN_HOSTS_PATH }}"
            create: yes
            line: "{{ item }}"
          with_items: "{{ keyscan.stdout_lines }}"
          become_user: "{{ created_username }}"
          become: true
      when: host_stat.rc == 1

    - name: Add SSH public key to GitHub account
      uri:
        status_code: [201, 422]
        url: https://api.github.com/user/keys
        validate_certs: no
        method: POST
        body:
          title: "{{ KEY_TITLE }}"
          key: "{{ key_content.stdout }}"
        body_format: json
        headers:
          Accept: "application/vnd.github+json"
          Authorization: "Bearer {{ GITHUB_ACCESS_TOKEN }}"
      register: task_log
      become_user: "{{ created_username }}"
      become: true

    - name: Clone the repository
      shell: GIT_SSH_COMMAND="ssh -i {{ KEY_PATH }} -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" {{ GIT_EXECUTABLE }} clone {{ GIT_REPO }} {{ CLONE_DEST }}
      args:
        creates: "{{ CLONE_DEST }}"
      become_user: "{{ created_username }}"
      become: true

    # Strapi App and DB setup + PM2
    - name: Start postgresql service
      service:
        name: postgresql
        state: started
        enabled: yes
      become_user: "{{ created_username }}"
      become: true

    - name: Update postgres pg_hba.conf
      lineinfile:
        path: /etc/postgresql/12/main/pg_hba.conf
        regexp: "^local   all             postgres                                peer"
        state: present
        line: "local   all             postgres                                trust"
      register: pgconf

    - name: Reload postgresql service
      service:
        name: postgresql
        state: reloaded
      when: pgconf.changed
      become: true

    - name: Create postgres user
      postgresql_user:
        name: "strapi"
        db: "strapi"
        state: present
        role_attr_flags: CREATEDB,SUPERUSER
      become_user: "{{ created_username }}"
      become: true

    - name: Create postgres database
      postgresql_db:
        name: "strapi"
        owner: "strapi"
        state: present
      become_user: "{{ created_username }}"
      become: true

    - name: Create pm2 ecosystem config from template
      template:
        src: ./templates/ecosystem.config.js.j2 # local src
        dest: ~/ecosystem.config.js # remote dest
        force: no
      become_user: "{{ created_username }}"
      become: true

    # NGINX config
    - name: Create nginx config file from template
      template:
        src: ./templates/strapi_site.conf.j2 # local src
        dest: /etc/nginx/sites-available/strapi_site.conf # remote dest
        force: no
      become: true

    - name: Create symlink for NGINX config file
      file:
        src: /etc/nginx/sites-available/strapi_site.conf
        dest: /etc/nginx/sites-enabled/default
        state: link
      become: true

    - name: Start NGINX
      service:
        name: nginx
        state: started

    - name: Initialize Certbot with the NGINX plugin
      shell: "sudo certbot --nginx -d {{ strapi_domain }} -m {{ email }} --noninteractive --agree-tos"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "/etc/letsencrypt/.updated-options-ssl-nginx-conf-digest.txt"
      become_user: "{{ created_username }}"
      become: true

    - name: Schedule a cron to run certbot renew at 12pm every day
      cron:
        name: "certbot renew"
        minute: "0"
        hour: "12"
        job: "/usr/bin/certbot renew --quiet"
      register: certcron

    - name: Create error.html for nginx default error pages
      template:
        src: ./templates/error.html.j2 # local src
        dest: ~/error.html # remote dest
        force: no
      become_user: "{{ created_username }}"
      become: true

    - name: Restart NGINX
      service:
        name: nginx
        state: restarted
      when: certcron.changed
      become: true

    - name: Start strapi process via pm2 (ecosystem.config.js)
      shell: ". ~/.nvm/nvm.sh && pm2 startOrRestart ecosystem.config.js --env production"
      args:
        executable: /bin/bash
        chdir: "/home/{{ created_username }}"
      become_user: "{{ created_username }}"
      become: true

    # Firewall
    # - name: UFW - Allow SSH connections
    #   community.general.ufw:
    #     rule: allow
    #     name: OpenSSH

    # - name: UFW - Allow NGINX connections
    #   community.general.ufw:
    #     rule: allow
    #     name: Nginx Full

    # - name: UFW - Enable and deny by default
    #   community.general.ufw:
    #     state: enabled
    #     default: deny
