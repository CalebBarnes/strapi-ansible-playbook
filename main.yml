---
- hosts: all
  vars:
    created_username: caleb
    node_version: lts/fermium
    email: caleb.d.barnes@gmail.com
    strapi_domain: strapi.calebbarnes.ca
  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
      become: true

    - name: Setup passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL) NOPASSWD: ALL"
        validate: "/usr/sbin/visudo -cf %s"
      become: true

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ created_username }}"
        state: present
        groups: sudo
        shell: /bin/bash
        append: true
        create_home: true
      become: true

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ created_username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
      become: true

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin prohibit-password"
      become: true

    - name: Update apt and install required system packages
      apt:
        pkg:
          - curl
          - vim
          - git
          - ufw
          - build-essential # required for some npm packages to work
          - nginx # the web server we will use to serve our nodejs app
          - certbot # Letâ€™s Encrypt SSL certificates
          - python3-certbot-nginx
        state: latest
        update_cache: true
      become: true

    - name: Install nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      args:
        creates: "~/.nvm/nvm.sh"
      become_user: "{{ created_username }}"
      become: true

    - name: Install node with nvm
      shell: ". ~/.nvm/nvm.sh && nvm install {{ node_version }} && nvm alias default {{ node_version }} && nvm use default"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "/home/{{ created_username }}/.nvm/versions/node/*/bin/npm"
      become_user: "{{ created_username }}"
      become: true

    - name: Install yarn
      shell: ". ~/.nvm/nvm.sh && npm install yarn -g"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "~/.nvm/versions/node/*/bin/yarn"
      become_user: "{{ created_username }}"
      become: true

    - name: Install pm2
      shell: ". ~/.nvm/nvm.sh && yarn global add pm2"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "/home/{{ created_username }}/.yarn/bin/pm2"
      become_user: "{{ created_username }}"
      become: true

    - name: Add yarn global bin to PATH in profile
      blockinfile:
        path: "~/.profile"
        block: |
          # set PATH so it includes yarn global bin if it exists
          if [ -d "$HOME/.yarn/bin" ] ; then
              PATH="$HOME/.yarn/bin:$PATH"
          fi
      become_user: "{{ created_username }}"
      become: true

    # NGINX config
    - name: Create nginx config file from template
      template:
        src: ./templates/strapi_site.conf.j2 # local src
        dest: /etc/nginx/sites-available/strapi_site.conf # remote dest
      args: 
        creates: /etc/nginx/sites-available/strapi_site.conf
      become: true

    - name: Create symlink for NGINX config file
      file:
        src: /etc/nginx/sites-available/strapi_site.conf
        dest: /etc/nginx/sites-enabled/default
        state: link
      become: true

    - name: Start NGINX
      service:
        name: nginx
        state: started

    # - name: Restart NGINX
    #   service:
    #     name: nginx
    #     state: restarted
      # become: true

    - name: Initialize Certbot with the NGINX plugin
      shell: "sudo certbot --nginx -d {{ strapi_domain }} -m {{ email }} --noninteractive --agree-tos && touch .certbot_init_success"
      args:
        chdir: "/home/{{ created_username }}"
        executable: /bin/bash
        creates: "/home/{{ created_username }}/.certbot_init_success"
      become_user: "{{ created_username }}"
      become: true

    # - name: Schedule a cron to run certbot renew at 12pm every day
    #   cron:
    #     name: "certbot renew"
    #     minute: "0"
    #     hour: "12"
    #     job: "/usr/bin/certbot renew --quiet"

    # - name: Restart NGINX
    #   service:
    #     name: nginx
    #     state: restarted
    #   become: yes

    # Firewall
    # - name: UFW - Allow SSH connections
    #   community.general.ufw:
    #     rule: allow
    #     name: OpenSSH

    # - name: UFW - Allow NGINX connections
    #   community.general.ufw:
    #     rule: allow
    #     name: Nginx Full

    # - name: UFW - Enable and deny by default
    #   community.general.ufw:
    #     state: enabled
    #     default: deny
